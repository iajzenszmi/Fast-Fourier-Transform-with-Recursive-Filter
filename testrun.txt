(base) ian@ian-Latitude-E7440:~$ cat frf.py
import numpy as np
import matplotlib.pyplot as plt
from scipy.fft import fft

# Parameters
sampling_rate = 1000  # Hz
duration = 1  # second
frequencies = [5, 50, 100]  # Hz

# Time array
t = np.linspace(0, duration, int(sampling_rate * duration), endpoint=False)

# Generate a composite signal
signal = np.sum([np.sin(2 * np.pi * f * t) for f in frequencies], axis=0)

# Recursive filter (simple first-order low-pass filter)
class RecursiveFilter:
    def __init__(self, alpha):
        self.alpha = alpha
        self.y_prev = 0

    def apply(self, x):
        y = self.alpha * x + (1 - self.alpha) * self.y_prev
        self.y_prev = y
        return y

# Create and apply the filter
alpha = 0.1  # Filter coefficient
filter = RecursiveFilter(alpha)
filtered_signal = np.array([filter.apply(x) for x in signal])

# Fourier analysis
fft_original = fft(signal)
fft_filtered = fft(filtered_signal)
freq = np.fft.fftfreq(len(t), d=1/sampling_rate)

# Plotting
plt.figure(figsize=(12, 8))

# Original Signal
plt.subplot(2, 2, 1)
plt.plot(t, signal)
plt.title("Original Signal")
plt.xlabel("Time [s]")
plt.ylabel("Amplitude")

# Filtered Signal
plt.subplot(2, 2, 2)
plt.plot(t, filtered_signal)
plt.title("Filtered Signal")
plt.xlabel("Time [s]")
plt.ylabel("Amplitude")

# FFT Original Signal
plt.subplot(2, 2, 3)
plt.plot(freq, np.abs(fft_original))
plt.title("FFT of Original Signal")
plt.xlabel("Frequency [Hz]")
plt.ylabel("Magnitude")
plt.xlim([0, 150])

# FFT Filtered Signal
plt.subplot(2, 2, 4)
plt.plot(freq, np.abs(fft_filtered))
plt.title("FFT of Filtered Signal")
plt.xlabel("Frequency [Hz]")
plt.ylabel("Magnitude")
plt.xlim([0, 150])

plt.tight_layout()
plt.show()
(base) ian@ian-Latitude-E7440:~$ sloccount frf.py
Have a non-directory at the top, so creating directory top_dir
Adding /home/ian/frf.py to top_dir
Categorizing files.
Finding a working MD5 command....
Found a working MD5 command.
Computing results.


SLOC	Directory	SLOC-by-Language (Sorted)
47      top_dir         python=47


Totals grouped by language (dominant language first):
python:          47 (100.00%)




Total Physical Source Lines of Code (SLOC)                = 47
Development Effort Estimate, Person-Years (Person-Months) = 0.01 (0.10)
 (Basic COCOMO model, Person-Months = 2.4 * (KSLOC**1.05))
Schedule Estimate, Years (Months)                         = 0.09 (1.03)
 (Basic COCOMO model, Months = 2.5 * (person-months**0.38))
Estimated Average Number of Developers (Effort/Schedule)  = 0.09
Total Estimated Cost to Develop                           = $ 1,090
 (average salary = $56,286/year, overhead = 2.40).
SLOCCount, Copyright (C) 2001-2004 David A. Wheeler
SLOCCount is Open Source Software/Free Software, licensed under the GNU GPL.
SLOCCount comes with ABSOLUTELY NO WARRANTY, and you are welcome to
redistribute it under certain conditions as specified by the GNU GPL license;
see the documentation for details.
Please credit this data as "generated using David A. Wheeler's 'SLOCCount'."
(base) ian@ian-Latitude-E7440:~$ python3 frf.py
libGL error: MESA-LOADER: failed to open crocus: /usr/lib/dri/crocus_dri.so: cannot open shared object file: No such file or directory (search paths /usr/lib/x86_64-linux-gnu/dri:\$${ORIGIN}/dri:/usr/lib/dri, suffix _dri)
libGL error: failed to load driver: crocus
libGL error: MESA-LOADER: failed to open crocus: /usr/lib/dri/crocus_dri.so: cannot open shared object file: No such file or directory (search paths /usr/lib/x86_64-linux-gnu/dri:\$${ORIGIN}/dri:/usr/lib/dri, suffix _dri)
libGL error: failed to load driver: crocus
libGL error: MESA-LOADER: failed to open swrast: /usr/lib/dri/swrast_dri.so: cannot open shared object file: No such file or directory (search paths /usr/lib/x86_64-linux-gnu/dri:\$${ORIGIN}/dri:/usr/lib/dri, suffix _dri)
libGL error: failed to load driver: swrast
  

